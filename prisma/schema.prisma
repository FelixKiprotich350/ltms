// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL") // Use environment variable to store the connection URL
}

generator client {
  provider = "prisma-client-js"
}

model ClientConfiguration {
  uuid       String   @id @default(uuid()) // UUID as a unique field
  clientName String
  salesTax   Decimal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Person {
  uuid        String     @id @default(uuid()) // UUID as a unique field
  firstName   String
  lastName    String
  email       String     @unique
  phoneNumber String?    @unique
  dateOfBirth DateTime?
  address     String?
  gender      String?
  nationality String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  LtmsUser    LtmsUser[]
}

model LtmsUser {
  uuid             String                  @id @default(uuid()) // UUID as a unique field
  username         String                  @unique
  email            String                  @unique
  loginStatus      String                  @default("ENABLED")
  approvalStatus   String                  @default("PENDING")
  passwordHash     String
  Person           Person                  @relation(fields: [personUuid], references: [uuid])
  personUuid       String                  @unique //fk to person uuid
  UserRole         UserRole?               @relation(fields: [userRoleUuid], references: [uuid])
  userRoleUuid     String
  departmentUuid   String?
  Department       OrganisationDepartment? @relation(fields: [departmentUuid], references: [uuid])
  groups           UserGroupMember[]
  letters          LetterRequest[]         @relation("LetterSender")
  approvals        Approval[]
  logs             Log[]
  notifications    Notification[]
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  RecipientsMaster RecipientsMaster[]      @relation(name: "UserPerosnofrecipient")
  // LetterTicket     LetterTicket[]

  LetterTicket LetterTicket[] @relation(name: "userCreatingTicket")
}

model UserRole {
  uuid        String       @id @default(uuid()) // UUID as a unique field
  name        String       @unique
  description String?
  users       LtmsUser[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          Int        @id @default(autoincrement()) // Int as PK
  uuid        String     @unique @default(uuid()) // UUID as a unique field
  name        String     @unique
  description String?
  roles       UserRole[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

//organisation
model OrganisationDepartment {
  uuid         String          @id @default(uuid())
  name         String          @unique
  activeStatus Boolean         @default(false)
  description  String
  Users        LtmsUser[]
  Letters      LetterRequest[] @relation("LetterDepartment")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  // RecipientsMaster RecipientsMaster[]

  RecipientsMaster RecipientsMaster[] @relation(name: "Departmentofrecipient")
}

model DepartmentRole {
  uuid        String   @id @default(uuid()) // UUID as a unique field
  name        String   @unique
  description String?
  // users       LtmsUser[]
  // permissions Permission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//letter request
model LetterRequest {
  uuid                 String                  @id @default(uuid())
  externalReference    String?
  subject              String
  body                 String
  confidentiality      String
  letterCategoryUuid   String
  LetterCategory       LetterCategory          @relation(fields: [letterCategoryUuid], references: [uuid])
  senderUserUuid       String
  SenderUser           LtmsUser                @relation("LetterSender", fields: [senderUserUuid], references: [uuid])
  senderDepartmentUuid String
  SenderDepartment     OrganisationDepartment? @relation("LetterDepartment", fields: [senderDepartmentUuid], references: [uuid])
  status               String                  @default("PENDING")
  Approvals            Approval[]
  Attachments          Attachment[]
  Logs                 Log[]
  LetterRecipients     LetterRecipients[]      @relation(name: "LetterstoRecipients")
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  LetterTicket         LetterTicket[]          @relation(name: "LetterTicket")
}

model LetterCategory {
  uuid        String          @id @default(uuid()) // UUID as a unique field
  name        String
  description String?
  isretired   Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Letter      LetterRequest[]
}

model RecipientsMaster {
  uuid                String                  @id @default(uuid()) // UUID as a unique field
  departmentUuid      String
  userPersonUuid      String?                 @unique
  recipientType       String
  isActive            Boolean                 @default(true)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  DepartmentRecipient OrganisationDepartment? @relation(name: "Departmentofrecipient", fields: [departmentUuid], references: [uuid])
  UserPersonRecipient LtmsUser?               @relation(name: "UserPerosnofrecipient", fields: [userPersonUuid], references: [uuid])
  LetterRecipients    LetterRecipients[]
}

model LetterRecipients {
  uuid          String           @id @default(uuid()) // UUID as a unique field
  letterUuid    String
  recipientUuid String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  Letter        LetterRequest    @relation(name: "LetterstoRecipients", fields: [letterUuid], references: [uuid])
  Recipient     RecipientsMaster @relation(fields: [recipientUuid], references: [uuid])

  @@unique([letterUuid, recipientUuid]) // Composite primary key
}

model Attachment {
  id         String        @id @default(uuid())
  letterUuid String
  letter     LetterRequest @relation(fields: [letterUuid], references: [uuid])
  fileUrl    String
  fileType   String
  fileName   String

  createdAt DateTime @default(now())
}

model LetterTicket {
  uuid                    String        @id @default(uuid()) // UUID as a unique field
  letterUuid              String
  userCreatingTicketUuuid String
  ticketNumber            String        @unique
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  Letter                  LetterRequest @relation(name: "LetterTicket", fields: [letterUuid], references: [uuid])
  UserCreating            LtmsUser      @relation(name: "userCreatingTicket", fields: [userCreatingTicketUuuid], references: [uuid])
}

model UserGroup {
  uuid    String            @id @default(uuid())
  name    String            @unique
  members UserGroupMember[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserGroupMember {
  id        String    @id @default(uuid())
  userUuid  String
  user      LtmsUser  @relation(fields: [userUuid], references: [uuid])
  groupUuid String
  group     UserGroup @relation(fields: [groupUuid], references: [uuid])
}

enum LetterStatus {
  PENDING
  APPROVED
  REJECTED
  FORWARDED
  COMPLETED
}

model Approval {
  id         String         @id @default(uuid())
  letterUuid String
  letter     LetterRequest  @relation(fields: [letterUuid], references: [uuid])
  userUuid   String
  user       LtmsUser       @relation(fields: [userUuid], references: [uuid])
  status     ApprovalStatus @default(PENDING)
  remarks    String?
  step       Int // Multi-level approval sequence
  deadline   DateTime? // Auto-escalation based on deadline
  escalated  Boolean        @default(false) // Mark if escalated

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Notification {
  id       String           @id @default(uuid())
  userUuid String
  user     LtmsUser         @relation(fields: [userUuid], references: [uuid])
  message  String
  read     Boolean          @default(false)
  type     NotificationType
  sentAt   DateTime         @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  EMAIL
  SMS
  SYSTEM
}

model Log {
  id         String        @id @default(uuid())
  letterUuid String
  letter     LetterRequest @relation(fields: [letterUuid], references: [uuid])
  userUuid   String
  user       LtmsUser      @relation(fields: [userUuid], references: [uuid])
  action     String

  createdAt DateTime @default(now())
}
